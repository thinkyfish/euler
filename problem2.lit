@code_type sml .sml

@title Problem 2

@s Problem Definition

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.




@s Memoized version of fibonacci function
--- Define fib
local
	val max_memory = 100
	val memory = Array.array (max_memory, NONE)
in
	fun fib_base 0 = 1
	  | fib_base 1 = 1
	  | fib_base n = (fib (n-1)) + (fib (n-2))
  	and fib n =
  		if n < max_memory then
  			case Array.sub (memory, n) of
  				SOME r => r
  			  | NONE =>
  			    let val r = fib_base n in
  			        Array.update(memory, n, SOME r);
  			        r
  			    end
  	    else
  	    	fib_base n
end
---

@s Recursive function to create the list of all values less than 4 million *)
--- Define fibs_starting_at
fun fibs_starting_at n =
	let val f = (fib n) in
		if f < 4000000
		then f :: fibs_starting_at (n + 1) 
		else nil
	end;

---

@s Take the sum of all the even values 

--- Define even
fun even a = Int.rem (a, 2) = 0;
---

--- Compute result	
val result = List.foldl (op +) 0 (List.filter even (fibs_starting_at 1));
---

--- problem2.sml
@{Define even}
@{Define fib}
@{Define fibs_starting_at}
@{Compute result}
print ((Int.toString result) ^ "\n");
---